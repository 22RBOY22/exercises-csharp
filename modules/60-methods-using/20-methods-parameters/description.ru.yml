---
name: Параметры методов
theory: |

  Такой метод как `ToUpper()` не требует никаких уточнений. Он всегда работает однозначно и возвращает строку в верхнем регистре. Но так бывает не всегда, например если мы хотим получить номер определенного символа в строке, то нам нужно как-то указать какой символ мы ищем. Для этого в вызовы методов можно передавать аргументы. Пример:

  ```cs
  var name = "Bran";
  // Находит номер указанного символа
  name.IndexOf('B'); // 0
  ```

  Почему символ первый, а вернулось 0? В программировании отсчет начинается с нуля. Поэтому первый символ находится на нулевой позиции или как говорят его индекс 0. Соответственно у последнего символа индекс это "длина строки - 1".

  ```cs
  var name = "Bran";
  // длинна строки 4 значит последний символ будет иметь индекс 3
  name.IndexOf('n'); // 3
  ```

  ## Несколько аргументов

  Параметров может быть больше чем один. Например метод `Replace()` работает с двумя, где первый это что заменить и второй – на что.

  ```cs
  var name = "Ramsay Snow";
  name.Replace("Snow", "Bolton"); // "Ramsay Bolton"
  ```

  ## Значения по умолчанию

  Параметры могут содержать значение по умолчанию, там где это значение является наиболее часто используемым. Такая возможность в языках добавлена исключительно для избавления программиста от рутины. Простой пример – метод извлекающий подстроку (часть строки) из строки. Первым параметром этот метод принимает на вход индекс с которого надо начать извлекать подстроку, а вторым – индекс до которого нужно извлекать символы. По умолчанию берется строка до конца:

  ```cs
  "Bran".Substring(1); // "ran"
  "Bran".Substring(1, 2); // "ra"
  "Bran".Substring(1, 3); // "ran"
  "Bran".Substring(2, 2); // "an"
  ```

  ## Индексаторы

  В C# у некоторых типов есть особенные методы – индексаторы. В частности, у строк есть индексатор. Для вызова метода-индексатора не нужно указывать название метода, а вызвать сам объект с квадратными скобками, например:

  ```cs
  "Bran"[0];  // 'B'
  "Bran"[1];  // 'r'
  "Bran"[2];  // 'a'
  "Bran"[3];  // 'n'
  ```

  Как видно из примера, вызов индексатора у строки получает символ с соответствующим номером.

instructions: |

  Вам даны три переменные с фамилиями разных людей. Составьте и выведите на экран слово из символов в таком порядке:

  1. третий символ из первой строки;
  2. второй символ из второй строки;
  3. четвертый символ из третьей строки;
  4. пятый символ из второй строки;
  5. третий символ из второй строки.

  Вывод результата должен быть примерно в таком виде:

  <pre class='hexlet-basics-output'>
  a b c d e
  </pre>

definitions:
  - name: Метод
    description: "операция, способная принимать данные и возвращать результат; Метод вызывается так: `Foo()`."
  - name: Аргумент
    description: "информация, которую метод получает при вызове. Например, `Foo(42)` — передача аргумента `42` методу `Foo()`"
