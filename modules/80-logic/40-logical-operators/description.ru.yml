---
name: Логические операторы
theory: |

  Мы уже умеем писать методы, которые проверяют одиночные условия. Теперь научимся строить составные условия. Хороший пример: проверка пароля. Как вы знаете, некоторые сайты при регистрации хотят пароль от 8 до 20 символов в длину. Честно говоря, это странное ограничение, но что поделать. В математике мы бы написали `8 < x < 20`, но в C# такой трюк не пройдет. Нам придётся сделать два отдельных логических выражения и соединить их специальным оператором «И»:

  Вот метод, который принимает пароль и говорит, соответствует ли он условиям (`true`) или не соответствует (`false`):

  ```cs
  // Пароль длиннее 8 символов **И** пароль короче 20 символов.
  public static bool IsCorrectPassword(string password)
  {
      var length = password.Length;
      return length > 8 && length < 20;
  }
  App.IsCorrectPassword("qwerty"); // false
  App.IsCorrectPassword("qwerty1234"); // true
  ```

  `&&` - означает «И». Всё выражение считается истинным, только если истинен каждый операнд — каждое из составных выражений. Другими словами, `&&` означает «и то, и другое». Приоритет этого оператора ниже, чем приоритет операторов сравнения, поэтому выражение отрабатывает правильно без скобок. Кроме `&&` часто используется оператор `||` — «ИЛИ». Он означает «или то, или другое, или оба». Операторы можно комбинировать в любом количестве и любой последовательности, но когда одновременно встречаются `&&` и `||`, то приоритет лучше задавать скобками.

  ```cs
  a && b || c; // Без скобок сложно понять приоритет
  a && (b || c) // Приоритет очевиден
  ```

  Другой пример. Мы хотим купить квартиру, которая удовлетворяет условиям: площадь от 100 кв. метров и больше на любой улице **ИЛИ** площадь от 80 кв. метров и больше, но на центральной улице *Main Street*. Напишем метод, проверяющий квартиру. Он принимает два параметра: площадь (число) и название улицы (строку):

  ```cs
  public static bool IsGoodApartment(int area, string street)
  {
      return area >= 100 || (area >= 80 && "Main Street" == street);
  }

  App.IsGoodApartment(91, "Queens Street"); // false
  App.IsGoodApartment(78, "Queens Street"); // false
  App.IsGoodApartment(70, "Main Street"); // false

  App.IsGoodApartment(120, "Queens Street"); // true
  App.IsGoodApartment(120, "Main Street"); // true
  App.IsGoodApartment(80, "Main Street"); // true
  ```

  Область математики, в которой изучаются логические операторы, называется булевой алгеброй. Ниже показаны «таблицы истинности» — по ним можно определить, каким будет результат применения оператора:

  ## И `&&`

  | A     | B     | A && B   |
  | ----- | ----- | -------  |
  | TRUE  | TRUE  | **TRUE** |
  | TRUE  | FALSE | FALSE    |
  | FALSE | TRUE  | FALSE    |
  | FALSE | FALSE | FALSE    |


  ## ИЛИ `||`

  | A     | B     | A \|\| B |
  | ----- | ----- | -------- |
  | TRUE  | TRUE  | **TRUE** |
  | TRUE  | FALSE | **TRUE** |
  | FALSE | TRUE  | **TRUE** |
  | FALSE | FALSE | FALSE    |

instructions: |

  Джон поручил Сэму реализовать автоматическое распознавание солдат Ланнистеров на видео. Идея автоматизировать дозор крепости казалась ему привлекательной. В процессе работы Сэму понадобилось написать функцию, которая определяет, Ланнистер ли перед ним или нет. Немного подумав, Сэм выделил следующие правила определения Ланнистера:

  ---

  Если у солдата доспехи красного цвета **И** нет щита

  **ИЛИ**

  если у солдата есть щит с изображением льва

  **то это Ланнистер**.

  ---

  ![Ланнистер или нет](https://i.imgur.com/x08CIAC.jpg)

  Напишите метод `IsLannisterSoldier()`, которая принимает на вход два аргумента:

  1. Цвет доспехов (строка). Если доспехи красные, то строка `"red"`.
  2. `null` если щита нет. Строка `"lion"`, если щит есть, и на нём изображен лев.

  Функция возвращает `true`, если распознан Ланнистер, и `false` если не распознан.

  Примеры вызова:

  ```cs
  App.IsLannisterSoldier("red", "lion"); // true
  App.IsLannisterSoldier("blue", null);  // false
  ```

tips:
  - |
    [Булева алгебра](https://ru.wikipedia.org/wiki/Булева_алгебра)
  - |
    [Конъюнкция](https://ru.wikipedia.org/wiki/Конъюнкция)
  - |
    [Дизъюнкция](https://ru.wikipedia.org/wiki/Дизъюнкция)
